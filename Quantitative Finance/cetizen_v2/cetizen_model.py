import pandas as pd
import numpy as np
from datetime import datetime
from dbhandler import DBHandler

class CashFlowRVI_KT:
    
    def __init__(self, db):
        
        # 환경설정
        self.db = db
        self.tableName = '가치평가'
        self.lastModifiedBy = 'RVI_PHONE'
        self.lastUpdateDate = datetime.now().strftime('%Y-%m-%d')
        
    def set_info(self, 계약정보ID, 가정ID):
        
        # 가정 및 계약정보 불러오기
        self.계약정보ID = 계약정보ID
        self.가정ID = 가정ID
        계약정보_전체 = self.db.getTableAll('계약정보')
        가정_전체 = self.db.getTableAll('가정')
        self.계약정보 = 계약정보_전체.query('계약정보ID == "{}"'.format(계약정보ID)).iloc[0]
        self.가정 = 가정_전체.query('가정ID == "{}"'.format(가정ID)).iloc[0]
        
        self.set_cont(self.계약정보)
        self.set_assum(self.가정)
        
    def set_cont(self, 계약정보):
        
        # 계약정보 입력
        self.월납보험료 = 계약정보['월납보험료']
        self.출고가 = 계약정보['출고가']
        self.반납시점 = 계약정보['반납시점']
        self.보장율 = 계약정보['보장율']/100
        self.손실한도 = 계약정보['손실한도']/100
        self.공임비 = 계약정보['공임비']
        self.공동인수율 = 계약정보['공동인수율']/100
        self.대리점수수료율 = 계약정보['대리점수수료율']/100
        self.출재율 = 계약정보['출재율']/100
        self.출재수수료율 = 계약정보['출재수수료율']/100

        
    def set_assum(self, 가정):

        # 가정 입력
        self.총가입자수 = 가정['총가입자수']
        self.월해지율 = 가정['월해지율']/100
        self.매각가율 = 가정['매각가율']/100
        self.유지자기변율 = 가정['유지자기변율']/100
        self.기타사업비율 = 가정['기타사업비율']/100
        self.잔존율 = 가정['잔존율']/100
        
    def valuation(self):
        
        # 해지율, 유지율, 기변율, 손실율
        해지율 = np.ones(self.반납시점)*self.월해지율
        유지율 = np.ones(self.반납시점+1)
        for i in range(1, self.반납시점+1):
            유지율[i] = 유지율[i-1]-해지율[i-1]
        기변율 = np.zeros(self.반납시점)
        기변율[-1] = 유지율[-1]*self.유지자기변율
        손실율 = self.보장율 - self.잔존율*self.매각가율
        
        # 기말유지자, 기변자
        기말유지자 = self.총가입자수*유지율
        기변자 = np.zeros_like(기말유지자)
        기변자[-1] = 기말유지자[-1]*self.유지자기변율
        
        # 원수보험료, 출재보험료, 보유보험료
        원수보험료 = self.월납보험료*기말유지자*self.공동인수율
        원수보험료[-1] = 0
        출재보험료 = 원수보험료*self.출재율
        보유보험료 = 원수보험료-출재보험료

        # 원수보험금, 출재보험금, 보유보험료
        원수보험금 = np.zeros_like(원수보험료)
        원수보험금[-1] = max(min((self.출고가*손실율+self.공임비)*기변자[-1]*self.공동인수율,
                            원수보험료.sum()*self.손실한도), 0)
        출재보험금 = 원수보험금*self.출재율
        보유보험금 = 원수보험금-출재보험금

        # 대리점수수료, 출재수수료, 기타사업비, 원수사업비, 보유사업비
        대리점수수료 = 원수보험료*self.대리점수수료율
        출재수수료 = 출재보험료*self.출재수수료율
        기타사업비 = 원수보험료*self.기타사업비율
        원수사업비 = 대리점수수료+기타사업비
        보유사업비 = 원수사업비-출재수수료

        # 현금유입, 현금유출, 순현금흐름
        현금유입 = 원수보험료+출재보험금+출재수수료
        현금유출 = 원수보험금+출재보험료+출재수수료+기타사업비
        순현금흐름 = 현금유입-현금유출
        
        # 데이터프레임 생성
        가치평가 = pd.DataFrame({
            '시점':np.arange(self.반납시점+1),
            '기말유지자':기말유지자,
            '기변자':기변자,
            '원수보험료':원수보험료,
            '출재보험료':출재보험료,
            '보유보험료':보유보험료,
            '원수보험금':원수보험금,
            '출재보험금':출재보험금,
            '보유보험금':보유보험금,
            '대리점수수료':대리점수수료,
            '출재수수료':출재수수료,
            '기타사업비':기타사업비,
            '원수사업비':원수사업비,
            '보유사업비':보유사업비,
            '현금유입':현금유입,
            '현금유출':현금유출,
            '순현금흐름':순현금흐름
        })
        가치평가['가정ID'] = self.가정ID
        가치평가['계약정보ID'] = self.계약정보ID
        가치평가['LAST_MODIFIED_BY'] = self.lastModifiedBy
        가치평가['LAST_UPDATE_DATE'] = self.lastUpdateDate
        가치평가_열 = self.db.getColumn('가치평가')
        가치평가 = 가치평가[가치평가_열]
        
        return 가치평가

    def profit(self):
        
        # 가정 초기화
        가치평가 = self.valuation()
        
        # 원수손해율, 보유손해율, 원수합산비율, 보유합산비율, 원수손익, 보유손익
        가치평가_합계 = 가치평가.sum()
        원수손해율 = 가치평가_합계['원수보험금']/가치평가_합계['원수보험료']*100
        보유손해율 = 가치평가_합계['원수보험금']/가치평가_합계['원수보험료']*100
        원수합산비율 = (가치평가_합계['원수보험금']+가치평가_합계['대리점수수료']+가치평가_합계['기타사업비'])/가치평가_합계['원수보험료']*100
        보유합산비율 = (가치평가_합계['보유보험금']+가치평가_합계['대리점수수료']+가치평가_합계['기타사업비']-가치평가_합계['출재수수료'])/가치평가_합계['보유보험료']*100
        원수손익 = 가치평가_합계['원수보험료']-가치평가_합계['원수보험금']-가치평가_합계['대리점수수료']-가치평가_합계['기타사업비']
        보유손익 = 가치평가_합계['보유보험료']-가치평가_합계['보유보험금']-가치평가_합계['대리점수수료']-가치평가_합계['기타사업비']+가치평가_합계['출재수수료']
        
        # 데이터프레임 생성
        손익분석 = pd.DataFrame({
            '계약정보ID':[self.계약정보ID],
            '가정ID':[self.가정ID],
            '원수손해율':[원수손해율],
            '보유손해율':[보유손해율],
            '원수합산비율':[원수합산비율],
            '보유합산비율':[보유합산비율],
            '원수손익':[원수손익],
            '보유손익':[보유손익]
        })
        손익분석['계약정보ID'] = self.계약정보ID
        손익분석['가정ID'] = self.가정ID
        손익분석['LAST_MODIFIED_BY'] = self.lastModifiedBy
        손익분석['LAST_UPDATE_DATE'] = self.lastUpdateDate
        손익분석_열 = self.db.getColumn('손익분석')
        손익분석 = 손익분석[손익분석_열]
            
        return 손익분석
    
    def genSce(self, 총가입자수_하한, 총가입자수_상한, 총가입자수_단위, 총가입자수_대상,
               월해지율_하한, 월해지율_상한, 월해지율_단위, 월해지율_대상,
               매각가율_하한, 매각가율_상한, 매각가율_단위, 매각가율_대상,
               유지자기변율_하한, 유지자기변율_상한, 유지자기변율_단위, 유지자기변율_대상,
               기타사업비율_하한, 기타사업비율_상한, 기타사업비율_단위, 기타사업비율_대상,
               잔존율_하한, 잔존율_상한, 잔존율_단위, 잔존율_대상):
        
        총가입자수_전체 = np.arange(총가입자수_하한, 총가입자수_상한+1e-6, 총가입자수_단위) if 총가입자수_대상 else np.array([self.가정['총가입자수']])
        월해지율_전체 = np.arange(월해지율_하한, 월해지율_상한+1e-6, 월해지율_단위) if 월해지율_대상 else np.array([self.가정['월해지율']])
        매각가율_전체 = np.arange(매각가율_하한, 매각가율_상한+1e-6, 매각가율_단위) if 매각가율_대상 else np.array([self.가정['매각가율']])
        유지자기변율_전체 = np.arange(유지자기변율_하한, 유지자기변율_상한+1e-6, 유지자기변율_단위) if 유지자기변율_대상 else np.array([self.가정['유지자기변율']])
        기타사업비율_전체 = np.arange(기타사업비율_하한, 기타사업비율_상한+1e-6, 기타사업비율_단위) if 기타사업비율_대상 else np.array([self.가정['기타사업비율']])
        잔존율_전체 = np.arange(잔존율_하한, 잔존율_상한+1e-6, 잔존율_단위) if 잔존율_대상 else np.array([self.가정['잔존율']])
        row = self.가정.copy()
        가정_전체 = row.to_frame().T
        idx = 0
        가정ID = self.가정['가정ID']
        for 총가입자수 in 총가입자수_전체:
            for 월해지율 in 월해지율_전체:
                for 매각가율 in 매각가율_전체:
                    for 유지자기변율 in 유지자기변율_전체:
                        for 기타사업비율 in 기타사업비율_전체:
                            for 잔존율 in 잔존율_전체:
                                idx += 1
                                row['가정ID'] = 가정ID + '_S{:05d}'.format(idx)
                                row['총가입자수'] = 총가입자수
                                row['월해지율'] = 월해지율
                                row['매각가율'] = 매각가율
                                row['유지자기변율'] = 유지자기변율
                                row['기타사업비율'] = 기타사업비율
                                row['잔존율'] = 잔존율
                                가정_전체 = 가정_전체.append(row)
        가정_전체 = 가정_전체.query('가정ID != @가정ID').reset_index(drop=True)
        return 가정_전체
    
    def stress_test(self, 가정_민감도):
        rst = []
        for _, 가정 in 가정_민감도.iterrows():
            self.가정ID = 가정['가정ID']
            self.set_assum(가정)
            df = self.profit()
            rst.append(df)
        self.가정ID = self.가정['가정ID']
        df = pd.concat(rst)
        return df